/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ptcSistemaEscola;

import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import static ptcSistemaEscola.Conexao.con;


/**
 *
 * @author samue
 */
public class tTurma_Det extends javax.swing.JFrame {
DefaultTableModel model;
    /**
     * Creates new form tTurma_Det
     */
    public tTurma_Det() {
        initComponents();
        Conexao.Conectar(); 
        jTable1.getColumnModel().getColumn(0).setMaxWidth(100); 
        jTable1.getColumnModel().getColumn(1).setMaxWidth(320);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(420); 
        jTable1.getColumnModel().getColumn(2).setMaxWidth(420); 
        model =  (DefaultTableModel) jTable1.getModel(); 
        jTable1.setAutoResizeMode(jTable1.AUTO_RESIZE_OFF);
        CarregarCombo();
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSair = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbxTurma1 = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        btnConsultar = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnGravar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbxTurma2 = new javax.swing.JComboBox<>();
        cbxAluno2 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnIncluir = new javax.swing.JButton();
        cbxAluno1 = new javax.swing.JComboBox<>();
        lblCapacidade = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        lblTurmaDetID = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Cadastro do Aluno/a na Turma");
        setResizable(false);

        btnSair.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel4.setText("Cadastro do Aluno/a na Turma");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Turma:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setText("Aluno/a: ");
        jLabel3.setToolTipText("");

        cbxTurma1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxTurma1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar" }));
        cbxTurma1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxTurma1ItemStateChanged(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Consultar, Alterar e Excluir \n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 16))); // NOI18N

        btnConsultar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnConsultar.setText("Consultar");
        btnConsultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarActionPerformed(evt);
            }
        });

        btnAlterar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAlterar.setText("Alterar");
        btnAlterar.setEnabled(false);
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnGravar.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnGravar.setText("Gravar");
        btnGravar.setEnabled(false);
        btnGravar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarActionPerformed(evt);
            }
        });

        btnExcluir.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.setEnabled(false);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel5.setText("Turma:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel6.setText("Aluno/a:");

        cbxTurma2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxTurma2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar" }));

        cbxAluno2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxAluno2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbxTurma2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbxAluno2, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGravar, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnConsultar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxTurma2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxAluno2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(btnConsultar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGravar)
                    .addComponent(btnAlterar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExcluir)
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "RA", "Aluno", "Turma"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(90);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(260);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(420);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(320);
        }

        btnIncluir.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnIncluir.setText("Incluir");
        btnIncluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncluirActionPerformed(evt);
            }
        });

        cbxAluno1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cbxAluno1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecionar" }));

        lblCapacidade.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblCapacidade.setText("A Capacidade de Alunos na Turma é:  ");
        lblCapacidade.setToolTipText("");

        lblTotal.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        lblTotal.setText("O Total de Alunos atualmente nessa turma é:");

        lblTurmaDetID.setFont(new java.awt.Font("Tahoma", 0, 3)); // NOI18N
        lblTurmaDetID.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnIncluir, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(lblCapacidade)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxTurma1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbxAluno1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(lblTurmaDetID, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotal))
                        .addGap(301, 301, 301)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel4)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCapacidade)
                        .addGap(18, 18, 18)
                        .addComponent(lblTotal)
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbxTurma1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cbxAluno1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addComponent(lblTurmaDetID, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(97, 97, 97)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSair)
                            .addComponent(btnIncluir))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //private void CarregarCapacidade(){
        
    //}
        
    private void CarregarCombo() {
        String sql;
        try
        {
            cbxTurma1.removeAllItems();
            cbxTurma2.removeAllItems();
            cbxAluno1.removeAllItems();
            cbxAluno2.removeAllItems();
            cbxTurma1.addItem("Selecione...");
            cbxTurma2.addItem("Selecione...");
            cbxAluno1.addItem("Selecione...");
            cbxAluno2.addItem("Selecione...");
            
            sql = "select Nome from Matricula order by Nome asc";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            while(rs.next())
            {
                cbxAluno1.addItem(rs.getString("Nome"));
                cbxAluno2.addItem(rs.getString("Nome"));
            }
            
            sql = "select Codigo from Turma";
            stm = con.createStatement();
            rs = stm.executeQuery(sql);
            while(rs.next())
            {
                cbxTurma1.addItem(rs.getString("Codigo"));
                cbxTurma2.addItem(rs.getString("Codigo"));
            }            
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Erro ao incluir os combos. "+e,"ERRO: ",JOptionPane.INFORMATION_MESSAGE);
        }
    }
      
    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        try{
            Conexao.con.close();
        }
        catch (Exception e){
            System.out.println(e);
        }
        tMenu menu = new tMenu();
        this.dispose();
        menu.setVisible(true);
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnConsultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarActionPerformed
        String sql;
        String nomeAluno="", CodigoTurma="", alunoID="", TurmaID="", limpacbx = "Selecione..."; 
        model.setRowCount(0);
        nomeAluno =  cbxAluno2.getSelectedItem().toString();
        CodigoTurma = cbxTurma2.getSelectedItem().toString();        
        try
        {
            if(!nomeAluno.equals("Selecione..."))
            {
                sql = "select tabelaAluno.AlunoID from Aluno tabelaAluno inner join Matricula tabelaMatricula on  tabelaMatricula.RA = tabelaAluno.RA  where tabelaMatricula.Nome = '" + nomeAluno + "'";
                Statement stm = con.createStatement();
                ResultSet rs = stm.executeQuery(sql);
                while(rs.next())
                {
                    alunoID = rs.getString("AlunoID");
                }
            }
            if (!CodigoTurma.equals("Selecione..."))
            {
                sql = "select TurmaID from Turma where Codigo = '" + CodigoTurma + "'";
                Statement stm = con.createStatement();
                ResultSet rs = stm.executeQuery(sql);
                while(rs.next())
                {
                    TurmaID = rs.getString("TurmaID");
                }
            }
            
            sql = "SELECT tabelaTurma.*, tabelaAluno.RA, tabelaMatricula.Nome as NomeAluno, turma.Codigo as TurmaCodigo from Turma_Detalhamento "
            + "tabelaTurma inner join aluno tabelaAluno ON tabelaAluno.AlunoID = tabelaTurma.AlunoID inner join turma turma ON turma.TurmaID = tabelaTurma.TurmaID "
            + "left join matricula tabelaMatricula ON tabelaMatricula.RA = tabelaAluno.RA Where 1 = 1 ";
            
            
            if(!alunoID.equals(""))
            {
                sql = sql + " AND tabelaAluno.AlunoID  = " + alunoID;
            }
            if(!TurmaID.equals(""))
            {
                sql = sql + " AND tabelaTurma.TurmaID = " + TurmaID;
            }
            sql = sql + " order by tabelaAluno.RA";
            
            
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            rs.first();
            rs.getRow();
            if(rs.getRow() > 0)
            {
                String[] linha = new String[]{rs.getString("Turma_DetID"),rs.getString("RA"),rs.getString("NomeAluno"),rs.getString("TurmaCodigo")};
                model.addRow(linha);
                while(rs.next())
                {
                    linha = new String[]{rs.getString("Turma_DetID"),rs.getString("RA"),rs.getString("NomeAluno"),rs.getString("TurmaCodigo")};
                    model.addRow(linha);
                }
                btnAlterar.setEnabled(true);
                btnExcluir.setEnabled(true);
                cbxAluno2.setSelectedItem(limpacbx);
                cbxTurma2.setSelectedItem(limpacbx);
            }
            else
            {
                JOptionPane.showMessageDialog( null, "Não existe dados para essa consulta!","Erro",JOptionPane.INFORMATION_MESSAGE);
                cbxTurma2.setSelectedItem(limpacbx);
                cbxAluno2.setSelectedItem(limpacbx);
            }            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Erro ao consultar, tente novamente "+e,"ERRO:",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnConsultarActionPerformed

    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        String aluno,turma;
        int linha = jTable1.getSelectedRow();
        if (linha==-1)
        {
            JOptionPane.showMessageDialog(null,"Você deve selecionar uma linha.");
        }
        else{
            lblTurmaDetID.setText((String) jTable1.getValueAt(linha, 0));
            aluno = ((String) jTable1.getValueAt(linha, 2));
            cbxAluno1.setSelectedItem(aluno);
            turma = ((String) jTable1.getValueAt(linha, 3));
            cbxTurma1.setSelectedItem(turma);
            cbxAluno1.requestFocus();
            btnGravar.setEnabled(true);
            btnIncluir.setEnabled(false);
            btnConsultar.setEnabled(false);
            btnExcluir.setEnabled(false);
        }
    }//GEN-LAST:event_btnAlterarActionPerformed

    private void btnGravarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarActionPerformed
        try
        {
            String sql;
            String aluno = "", turma = "", limpacbx = "Selecione...";
            sql = "Select aluno.AlunoID from Matricula matricula inner join Aluno aluno ON aluno.RA = matricula.RA where matricula.Nome = '" + cbxAluno1.getSelectedItem() + "'";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            while(rs.next())
            {
                aluno = rs.getString("AlunoID");
            }
            sql = "Select TurmaID from Turma where Codigo = '" + cbxTurma1.getSelectedItem() + "'";
            stm = con.createStatement();
            rs = stm.executeQuery(sql);
            while(rs.next())
            {
                turma = rs.getString("TurmaID");
            }
                          
            if(aluno.equals("") || turma.equals(""))
            {
                JOptionPane.showMessageDialog(null, "Por Favor, preencha os dados corretamente!","ERRO",JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
                sql="UPDATE turma_detalhamento set AlunoID= "+ aluno +",TurmaID = "+ turma +""
                + " where Turma_DetID = "+ lblTurmaDetID.getText(); 
                stm = con.prepareStatement(sql);
                stm.execute(sql);
                cbxAluno1.setSelectedItem(limpacbx);
                cbxTurma1.setSelectedItem(limpacbx);
                CarregarCombo();
                cbxAluno1.requestFocus();
                model.setRowCount(0);
                btnIncluir.setEnabled(true);
                btnConsultar.setEnabled(true);
                btnAlterar.setEnabled(false);
                btnGravar.setEnabled(false);
                JOptionPane.showMessageDialog( null, "Alteração realizada com Sucesso! ","Sucesso",JOptionPane.INFORMATION_MESSAGE);
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Erro ao alterar, tente novamente "+e,"ERRO: ",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnGravarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int linha = jTable1.getSelectedRow();
        if (linha==-1)
        {
            JOptionPane.showMessageDialog(null,"Você deve selecionar uma linha.");
        }
        else
        {
            int opcao = JOptionPane.showConfirmDialog(null,"Confirma exclusão","Excluindo...", JOptionPane.YES_NO_OPTION);
            String sql, codigo;
            codigo = (String) jTable1.getValueAt(linha, 0);
            if (opcao==0)
            {
                try
                {
                    sql="delete from Turma_Detalhamento where Turma_DetID= " + codigo;
                    Statement stm = con.prepareStatement(sql);
                    stm.execute(sql);
                    btnIncluir.setEnabled(true);
                    btnConsultar.setEnabled(true);
                    btnAlterar.setEnabled(false);
                    btnExcluir.setEnabled(false);
                    cbxAluno1.requestFocus();
                    CarregarCombo();
                    JOptionPane.showMessageDialog(null, "Exclusão feita com Sucesso! ","Sucesso", JOptionPane.INFORMATION_MESSAGE);
                }
                catch(Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Erro ao excluir, tente novamente " +e,"ERRO: ",JOptionPane.INFORMATION_MESSAGE);
                }
            }
            else
            {
                cbxAluno1.requestFocus();
                btnAlterar.setEnabled(false);
                btnExcluir.setEnabled(false);
            }
            model.setRowCount(0);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnIncluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncluirActionPerformed
        try
        {
            String sql;
            String aluno = "", turma = "", limpacbx = "Selecione...";
            sql = "Select aluno.AlunoID from Matricula matricula inner join Aluno aluno ON aluno.RA = matricula.RA where matricula.Nome = '" + cbxAluno1.getSelectedItem() + "'";
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(sql);
            while(rs.next())
            {
                aluno = rs.getString("AlunoID");
            }
            sql = "select TurmaID from Turma where Codigo = '" + cbxTurma1.getSelectedItem() + "'";
            stm = con.createStatement();
            rs = stm.executeQuery(sql);
            while(rs.next())
            {
                turma = rs.getString("TurmaID");
            }
                         
            if(aluno.equals("") || turma.equals(""))
            {
                JOptionPane.showMessageDialog(null, "Por Favor, preencha os dados corretamente!","ERRO",JOptionPane.INFORMATION_MESSAGE);
            }
            else
            {
                sql="INSERT INTO Turma_Detalhamento (AlunoID,TurmaID) "
                + "values (" + aluno +"," + turma + ")";

                stm = con.prepareStatement(sql);
                stm.execute(sql);
                cbxAluno1.setSelectedItem(limpacbx);
                cbxTurma1.setSelectedItem(limpacbx);
                CarregarCombo();
                cbxAluno1.requestFocus();
                model.setRowCount(0);
                JOptionPane.showMessageDialog( null, "Inclusão realizada com Sucesso! ","Sucesso",JOptionPane.INFORMATION_MESSAGE);
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Erro ao incluir, tente novamente "+e,"ERRO: ",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnIncluirActionPerformed

    private void cbxTurma1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxTurma1ItemStateChanged
        String sql;
        try
        {
            if(!cbxTurma1.getSelectedItem().equals(null))
            {
                lblTotal.setText("O Total de Alunos atualmente nessa turma é:");
                lblCapacidade.setText("A Capacidade de Alunos na Turma é:");  

                sql = "select Capacidade from Turma where Codigo = '"+ cbxTurma1.getSelectedItem().toString()+"'";
                Statement stm = con.createStatement();
                ResultSet rs = stm.executeQuery(sql);
                while(rs.next())
                {
                    lblCapacidade.setText("A Capacidade de Alunos na Turma é: "+rs.getString("Capacidade")); 

                }
                sql = "select count(1) as Quantidade from turma_detalhamento turma_det \n" +
                        "inner join turma TabelaTurma on TabelaTurma.turmaID = turma_det.turmaID \n" +
                        "where tabelaTurma.Codigo = '"+ cbxTurma1.getSelectedItem().toString()+"'";
                stm = con.createStatement();
                rs = stm.executeQuery(sql);
                while(rs.next())
                {
                    lblTotal.setText("O Total de Alunos atualmente nessa turma é: "+rs.getString("Quantidade")); 

                }
            }
        }
        catch(Exception e)
        {
            //JOptionPane.showMessageDialog(null, "Erro ao incluir capacidade "+e,"ERRO: ",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_cbxTurma1ItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tTurma_Det.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tTurma_Det.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tTurma_Det.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tTurma_Det.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new tTurma_Det().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnConsultar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnGravar;
    private javax.swing.JButton btnIncluir;
    private javax.swing.JButton btnSair;
    private javax.swing.JComboBox<String> cbxAluno1;
    private javax.swing.JComboBox<String> cbxAluno2;
    private javax.swing.JComboBox<String> cbxTurma1;
    private javax.swing.JComboBox<String> cbxTurma2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblCapacidade;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblTurmaDetID;
    // End of variables declaration//GEN-END:variables
}
